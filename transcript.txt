I learned about AI agents for you. So here's the Clifnotes version to save you weeks of me learning about this. There's not actually one course that just fully nicely covers everything. So I did three courses, read a bunch of papers and watch a lot on YouTube videos as well. And of course, actually made my own agents too. My notes themselves are over 200 pages long. But as per usual, it is not enough just to listen to me talk about stuff. So at the end of the video, there is a little assessment, which if you can answer these questions, then congratulations. You are now educated about AI agents. Now without further ado, let's get going. A portion of this video is sponsored by HubSpot. Here's the outline. First, we're going to talk about what even are AI agents. It is such a hyped up term now. Then we'll do a crash course on specifically multi-agent architectures. It's really interesting developing field. To make this actually all practical, I'm going to then show you how to create an AI agent workflow, which does not require any code. I was honestly so shocked by how powerful and easy to use as well these workflows are. Then finally, for those of you who are interested in getting into the field or even building your own AI agents for your businesses, I will leave you with a piece of advice that when I heard it, I was like, holy shit. So stay tuned for that, Adend. All right, so let's first define agents. Okay, so believe it or not, one of the most difficult things from this entire deep dive into AI agents for me was just the actual definition of an AI agent. Probably because it's just such a new field and people are still trying to figure out what even it is and how it works. So before watching this video, if you were also confused, I promise you it is not you. Let me walk you through this. The easiest way to first define AI agents is to give an example of what is not an AI agent. What is definitely not an AI agent is if you just ask an AI to do something for you, otherwise known as one-shot prompting. By the way, if you're interested in leveling up your prompt engineering skills, I did a video over here where I distilled down Google's 9-hour prompt engineering course into only 20 minutes. So check it out. Anyways, okay. So what is definitely not an AI agent is if you're just asking AI to do something directly. For example, if you just go to chat to BT and write, please write out an essay on topic X from start to finish in one go. You'll still get a response and it'll still be like coherent and on topic, but probably also be quite vague and probably not what you're looking for. On the other hand, if you use an agentic workflow that will significantly improve your results, and what that would look like is to break down that overarching task into different steps. Like first, maybe writing an outline for the topic. Consider if you maybe need to do some web research, then you might write your first draft. Consider what part of that draft may need more revision or more research, revise your draft before ultimately coming up with the essay. A non-agentic workflow is just from start to finish and you're done. While an agentic workflow is more a circular iterative process, you think and you do research come with an output, and then you revise that, and then you think you do some more research come up with an output, and you keep doing that until you get your final result. Non-agentic workflow, straight up and down. Agentic workflow, circular. Okay, so now let's add in a little bit of complexity. Got your non-agentic workflow, then you got your agentic workflow, then you have a third level, which is a truly autonomous AI agent. This is when an AI can completely independently figure out the exact steps which tools to use, go through that circular process of revising things by itself to finally come up with an output. This is the level that we want our AI agents to become, but currently, as of the time of this filming at least, we're not quite there yet. We're still focusing on this second level of agentic workflows, where there's certain agentic components to it, but it's not fully autonomous yet. But honestly, with speed that AI is developing who knows, maybe in like two months, that's going to happen. We'll see. Jarvis, you there? That's your set, this set. According to Angering, who's kind of like the superstar of the AI world, there are four massively accepted agentic design patterns. The first and simplest pattern is called reflection, where you're simply asking an AI to more carefully look through its own results. For example, you might ask an AI to please write the code in order to complete, you know, a specific task, and the AI is going to output some code. But you're not going to stop there. You're going to ask the AI to please now check the code carefully for correctness, style, and efficiency, and give constructive criticism for how to improve it. The AI could look over its own code, and then maybe find out that it made it a mistake on line five, and in which case they can actually fix that line of code and continue improving its own output. You're sort of helping that AI go through that circular agentic process to improve its output. A very simple extension of this is, instead of you being the one to help the AI figure this out, you can actually create another AI and have the other AI prompt the original AI to go through its own code and go through the reflection process. So this is called a multi-agent framework, and that's something that we will talk about a little bit later in the video, and it's like a really, really interesting field. Next up is tool use. By giving an AI the ability to use tools, you can help the AI better breakdown task and execute specific parts of the task.
 For example, if you're interested in buying a new coffee machine, you can ask an AI, what is the best coffee maker according to reviewers? Now if you give your AI the ability to search the internet like a web search tool, you're allowing it to add in the steps of actually searching different reviews on the internet, compiling them together before summarizing its findings. Which you would get a much better result than if you just ask it to directly come up with an answer. Another powerful commonly used tool is the code execution tool. This allows your AI to actually create and to build things like build out a website or calculate things, things that involve numbers and math. For example, you can ask the AI, if I invest $100 at compound 7% interest for 12 years, what do I have at the end? Your AI then can use this code execution tool to come up with the answer for you. There are lots and lots of different tools that you can equip your AI with. Including object detection, web generation, ability to access your emails and your calendars to schedule events for you. Your AI will use a very powerful agentic design pattern. Next up is planning and reasoning. This is when you can give an AI a certain task that you want done and it's able to figure out what are the exact steps to accomplish these and what are the necessary tools that it needs in order to accomplish these steps. For example, you can ask an AI, please generate an image where a girl is reading a book and her pose is the same as the boy in the image example.jpeg, then please describe the new image with your voice. With this agentic framework, it's able to first look at the image, access a specific model to determine the pose of the boy in the image, use another model to convert that specific pose to an image of a girl, and another model to translate the image to text. And finally, a text speech model to describe in audio what it is that the girl is doing. A girl is sitting on a bed reading a book. Now finally, we have multi agent systems. This is when instead of just having a single large language model, a single AI to a certain thing, you actually want to prompt different large language models to have different roles. So the question you might have is like, why can't you just have one AI and just tell it to do everything, right? And the reason for this is that AI in the sense is actually quite similar to humans. Just like if you're trying to complete a project, it's better to have a team of humans that all have their own specialized roles to come together to complete the project. And I suppose to just have like one person trying to juggle and handle everything. Same thing for AI. There's research that shows by having this multi agent workflow, the results of the final product is generally better than just asking one AI to do all of it. Okay, so here's a mnemonic in case you can't remember what the foragentic design patterns are. Just think about red turtles paint murals, reflection, tool use, planning, and multi agents. Hint. This will help in the little assessment at the end of this video. Okay, so to make this all a little bit more concrete, engineering also showed us some tasks, like some really cool tasks that are able to be accomplished by using these agentic design patterns. For example, like with this tool that has a agentic workflow built into it, you can take an image of this soccer game and be able to identify and count number of players on the field. You can also do stuff with video by prompting it, given a video, split the video into clips of five seconds and find a clip where the goal is being scored. This blade of frames associated with the goal. That is pretty cool. Just thinking about the use cases you can do with so much video and image data that is currently on tap. Some other examples of agentic systems that have produced really good results include AI powered research assistants that's able to research specific topics, AI writers that can then write down these topics, coders who can create software, and personal assistants, which I will actually show you how to build one later in the video. As we see today, AI agents and agentic workflows, just like any other AI tool, has a large component of prompt engineering. It just shows that prompt engineering really is one of the highest ROI skills that you can learn today. So if you're interested in leveling up your prompting skills, I highly recommend that you check out this free prompt engineering quick start guide that I made with HubSpot. It includes a step-by-step guide for creating great prompts and also tips to get better results. My favorite part is that for all the examples, there's a flow from bad to good to great prompts to show how you can improve a prompt. If you're able to go through this process and create great prompts, you would just become so much more productive and get so much more out of AI. So if you're interested, do check it out at this link over here, also linked in description. Thank you so much HubSpot for creating this free resource with me and for sponsoring this portion of the video. Next up, I want to do a quick crash course on multi-agent design patterns specifically. This is where there's a lot of focus and really cool breakthroughs that are happening. I did a couple courses. The best course that I found specifically for this topic was one by crew AI in collaboration with Deep Learning AI. This course by crew AI gives a really good introduction to different types of multi-agent design patterns, which I'm going to now cover. The first building block is a single AI agent and a single AI agent has four components. It needs to have a specific task and answer what it's supposed to give you, the model itself, and tools that it has access to. A nice little...
 On the modic here is Tired Alpacas Mixed P, task answers models tools. For example, you can have a travel planner AI agent. Its task is to plan a 3 day trip to Tokyo on a budget. The answer that you want is a detailed itinerary with locations and costs, as well as hotel bookings and any tickets. The AI model could be an anthropic plot for example, although you can switch that out for any other models that you like as well. And the tools that it needs include Google Maps, Skyscanner, figuring out what the tickets are, how much they cost, booking.com for logistics, and your saved credit card information, so that you can actually place these bookings. Task answer model tools. Tired Alpacas Mixed P. Okay, so we have our first singular unit of an agent, and the simplest multi-AI agent would just be have two AI agents that work together on something. Each AI agent has its own programming, but they're working together towards something. An example of this would be a writer agent who is meant to write a blog article and an editor agent who is providing feedback for the right even say with just two agents. There's a couple interesting points here. An agent can have its own task, but an agent can also be working with another agent on a task while having its own task as well. So there could be a lot of crisscross that's happening. And for tools, agents can have their own separate tools, but a task can also have a tool, which is really interesting. You can actually program a task to have a specific tool so that an agent can only have access to it for that task. Oh, and if you have more than one agent, then you have a crew. Hence the name, crew AI. Now, when you add in additional agents, there is even more complexity, and it becomes really, really interesting on how agents are interacting with each other. I can go on for ages about all the different configurations of agents working together and a tool that they're using, but this course has give us a really nice kind of overview of the different design patterns that people have used and seem to be really helpful. The first one is the sequential pattern. This is the simplest when you just have one agent do something and then it passes it on to another agent that does something else and another agent that does something else. Sort of like an assembly line, an example it has would be AI powered document processing. You can have your first agent, which extracts text from scan documents, then it passes on to another agent, who summarizes the text, then passes on to the next agent, who then extracts action items and puts it into a summary, and finally to a fourth agent that saves the data into a database. A higher article, higher article, a higher article, a higher article, a higher article, a higher article agent system would have a leader or manager agent that supervises multiple agents that have their own specific task. These sub agents would complete their task and report their results back to the manager agent, who then compiles it all together. An example of this would be writing a report for business decision making. You have your manager, AI agent that receives this task and then delegates it to different sub agents. Sub agent one monitors and reports back market threats and it would have specialized tools for looking into these markets. Sub agent two could be monitoring internal customer sentiment, so has access to the internal databases to see what kind of feedback customers are giving. While sub agent three tracks internal metrics across the company, so it's understanding how this specific product is interplaying with other products within the company. Now after all these agents do their job, they would all report back to the manager agent who's able to combine everything together and it might actually pass this along to another agent, say like a decision making agent, who may aggregate different insights and professionally put it into a report and come up with a ultimate business decision. Next up is the hybrid system. This combines different sequential and higher article structures together. Agents can collaborate top down as well as sequentially. An example of this would be in autonomous vehicles. At the top level you might have a AI agent that plans the overall route and traffic strategy for an autonomous vehicle. Then you have the sub agents that handle things like real-time sensor fusion, collision avoidance and road condition analysis. But it's not enough just to aggregate this information together and then just give it to the top level AI because you need to have a continuous feedback loop. As the vehicle itself is moving and the road conditions and everything around it internally and externally is all changing as well, you need to have lots of different little feedback loops between these different agents and then communicating continuously with the top level agent as well. This design pattern is really common in things like robotics, navigation systems and adaptive AI systems, basically like in places where there's lots of moving parts. There are also parallel agent design systems. This is when you have agents working on different work streams independently. Agents would be handling different parts of a task simultaneously often to speed up processing. An example of this would be like AI for large scale data analysis. This is a very common structure. The very large analysis involves different components and agents will take chunks of that data and process them separately. Ultimately at the end merging everything together. And finally, there is asynchronous multi-agent systems. This is when agents...
 execute tasks independently and at different times. This is a system that's proven to handle uncertain conditions better than a sequential or parallel approaches. An example of this would be something like an AI powered cybersecurity threat detection. You got Agent 1 that's monitoring network traffic in real time, Agent 2 that's monitoring suspicious usage patterns, and Agent 3 that's just randomly sampling and testing out different use cases. When any of these agents pick up something anomalous, they would flag it and then other things would happen after that. This type of asynchronous design pattern is especially helpful for anything that requires real time monitoring or self-healing systems. And finally to put them all together, you can actually have these different systems and then link up these systems themselves. And this is called a flow. This can result in really complex and interesting processing and results. But the note to make here is that as you increase the complexity of these systems, you're also basically increasing the amount of chaos that's within it as well. Since you don't actually have direct access to these agents, right? You can provide them with feedback and there's ways of doing that. But as you add on more and more complexity, there's more things and more moving parts that are kind of just like interacting with each other. It's actually pretty similar to how human companies work, right? The bigger your company becomes, the more chaotic it starts becoming as well. And the more emphasis you need to place on higher keys and different organization structures. I don't know this for sure, but if I were to bet, I do think a lot of research that people do into systems like human systems and companies probably also comes into play for multi-agent AI systems too. For the rest of the course, they basically go through different implementations and examples for these different multi-AI agent systems. So instead of going through all of these examples, I'm just gonna link in the description some of these notebooks where you can use code to implement these systems using crew AI. But do not worry if you're not a coder where you're just not interested in coding. I'm actually gonna now show you a way of creating these multi-AI agent systems completely with a no-code tool called N8N. Robot building sequence activated. I'm so glad we tried out our new Android building device instead of using that old dinosaur. So if you guys may have heard of Make.com, which people also used to make these multi-AI agent systems, but N8N is actually better for doing this specifically. Credit here to David Andres is 40-minute tutorial, which is what I follow and adapted to create my own AI assistant. This is a telegram based AI assistant that's able to communicate with you and help you prioritize your tasks by accessing your Google calendars and it can also create calendar events for you. So you can go on telegram and talk to Inki Bot, which is the assistant's name and say what do I need to do today? And it tells me that today is February 5th, 2025. And I have to film this video and the time is from 12 PM until 4 PM in Hong Kong. And it also asks me to list what are my other priorities for today so that it can come up with a list of tasks and a prioritize it for me. So I'm just telling that filming is my greatest priority and have these other things. So it's able to prioritize and put in sequence my other tasks as well as actually schedule calendar events corresponding to these specific tasks. Okay, so the way that this flow works is first you have the telegram triggers. So this is one I send him as stitch to Inki Bot. And from there, there's a switch. This is because they can take both text and voice input. So if it's text input, you would just directly take that information and feed it into the AI agent. But if it's voice input, we first get telegram to get the file, send it to open AI to transcribe the file and then send the text information to the AI agent as well. Now, the AI agent here is the interesting part. Remember, tired Apaka's make tea. The task is taking the user's query asking about what needs to be done for today. The answer is a prioritize to do list as well as scheduled events into Google Calendar if needed. The model we're using here is open AI's GPT40 mini, but you can also change that out for whatever other model that you want as well. Like cloud, Gemini, Lama, DeepSeek, whatever you like. And finally, it has two different tools. The first tool is to get calendar events. So it's able to read the Google Calendar and see what events there are for the day. It can also create calendar events. So when the user wants to add other events into the list, it can then go and actually create these events on the Google Calendar. Yeah, and then it would be able to communicate through a telegram with the user until it comes up with a list that the user is happy about. They can also do things like check off to list, plan ahead, look at what happened in the past, a lot of other things as well. As you can see, just this single agent, the super simple workflow, can already produce really cool results. So think about adding other agents there, other functionalities. It's really, really cool what you can do with this. And it's totally no code, which is crazy. All right, final section is on the opportunities for AI agents. I watched a lot of YouTube videos and read a lot of articles mostly for this section. And the biggest takeaway that I got from this, like assuming you want to be building something using AI.
 agents, something that is useful for other people you're building up a business is from this Y Combinator video where they say that for every SaaS, we're software as a service company, there will be a corresponding AI agent company. Let me just like repeat that because this is like huge guidance in terms of what to build for every software as a service company. Like all the software service companies that we see today, there will be a corresponding AI agent version of that. So if you don't know what to build or what to do right now and you want to play around with AI agents, just literally take a SaaS company and then think about how do I make that into an AI agent company. Just as chat to BT, what are some top SaaS companies? It says Adobe, Microsoft, Salesforce, Shopify, LinkTree, Canva, Squarespace, and on and on and on and on. There are so many. Literally every company that is a SaaS unicorn, you could imagine there's a vertical AI unicorn equivalent. I really think that piece of advice is literal gold. Let me know in the comments if there's a specific AI agent that you're interested in building. We're an AI agent business. Alright, we have come to the end of this video. Thank you so much for watching through it. As promised, here is a little assessment. If you can answer all of these questions, then congratulations. You can consider yourself educated on AI agents. Let me know the comments, what other topics, whether that's like AI topics, where other topics is fine as well, that you want me to do a deep dive into. Alright, thank you all so much for watching and I will see you guys in the next video, where live stream.